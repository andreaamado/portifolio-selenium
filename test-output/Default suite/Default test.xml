<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="12" hostname="LAPTOP-D4NSSRIT" failures="0" tests="8" name="Default test" time="0.061" errors="0" timestamp="2020-02-02T21:16:50 EST">
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.086">
    <failure type="java.lang.IllegalStateException" message="The path to the driver executable must be set by the webdriver.chrome.driver system property; for more information, see https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver. The latest version can be downloaded from http://chromedriver.storage.googleapis.com/index.html">
      <![CDATA[java.lang.IllegalStateException: The path to the driver executable must be set by the webdriver.chrome.driver system property; for more information, see https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver. The latest version can be downloaded from http://chromedriver.storage.googleapis.com/index.html
at com.google.common.base.Preconditions.checkState(Preconditions.java:738)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:124)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:32)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:137)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:330)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:88)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:124)
at main.WebDriverFactory.create(WebDriverFactory.java:18)
at main.Base.beforemethod(Base.java:21)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:345)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="test.users.Create" name="createUserTest" time="0.0">
    <skipped/>
  </testcase> <!-- createUserTest -->
  <testcase classname="test.users.Delete" name="deleteUserTest" time="0.0">
    <skipped/>
  </testcase> <!-- deleteUserTest -->
  <testcase classname="test.posts.Update" name="updatePostTest" time="0.0">
    <skipped/>
  </testcase> <!-- updatePostTest -->
  <testcase classname="test.users.Update" name="updateUserTest" time="0.0">
    <skipped/>
  </testcase> <!-- updateUserTest -->
  <testcase classname="test.posts.Delete" name="deletePostTest" time="0.0">
    <skipped/>
  </testcase> <!-- deletePostTest -->
  <testcase classname="test.posts.Create" name="createSimplePostTest" time="0.0">
    <skipped/>
  </testcase> <!-- createSimplePostTest -->
  <testcase classname="test.posts.Create" name="createPostTest" time="0.0">
    <skipped/>
  </testcase> <!-- createPostTest -->
  <testcase classname="test.login.Login" name="loginTest" time="0.0">
    <skipped/>
  </testcase> <!-- loginTest -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@BeforeSuite beforemethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforemethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
  <testcase classname="main.Base" name="@AfterSuite aftermethod" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite aftermethod -->
</testsuite> <!-- Default test -->
